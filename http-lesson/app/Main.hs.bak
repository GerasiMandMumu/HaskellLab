{-# LANGUAGE DeriveGeneric, OverloadedStrings, Arrows #-}

module Main where

import Control.Applicative
import Database.SQLite.Simple
import Database.SQLite.Simple.FromRow
import Data.Time

addUser :: String -> IO ()
addUser username =  do  
                    conn <- open "tools.db"
                    execute conn "INSERT INTO users (username) VALUES (?)" (Only username)
                    print "user added"
                    close conn
					

withConn :: String -> (Connection -> IO ()) -> IO ()
withConn dbName operation = do
                            conn <- open dbName
                            operation conn 
                            close conn


executeWrapper :: ToRow q =>  Query -> q -> String -> (Connection -> IO ())
executeWrapper sqlStml tuples successMsg =
            (\ conn ->  do 
                        execute conn sqlStml tuples
                        putStrLn successMsg
            )

checkoutMy :: Int -> Int -> IO ()
checkoutMy userId toolId = withConn "tools.db" $
        executeWrapper  "INSERT INTO checkedout (user_id,tool_id) VALUES (?,?)" 
                        (userId,toolId) 
						"check tool"
                

                            

checkout :: Int -> Int -> IO ()
checkout userId toolId = withConn "tools.db" $
                         \conn -> do
                           execute conn
                             "INSERT INTO checkedout (user_id,tool_id) VALUES (?,?)"
                             (userId,toolId)



data Tool = Tool
 { toolId :: Int
 , name :: String
 , description :: String
 , lastReturned :: Day
 , timesBorrowed :: Int
 }

data User = User
 { userId :: Int
 , userName :: String
 }

instance Show User where
   show user = mconcat [ show $ userId user
                       , ".)  "
                       , userName user]

instance Show Tool where
   show tool = mconcat [ show $ toolId tool
                       , ".) "
                       , name tool
                       , "\n description: "
                       , description tool
                       , "\n last returned: "
                       , show $ lastReturned tool
                       , "\n times borrowed: "
                       , show $ timesBorrowed tool
                       , "\n"]

                       
instance FromRow User where
   fromRow = User <$> field
                  <*> field

instance FromRow Tool where
   fromRow = Tool <$> field
                  <*> field
                  <*> field
                  <*> field
                  <*> field


printUsers :: IO ()
printUsers = do 
        withConn "tools.db" $
                (\ conn ->
                           do
                           values <- query_ conn "SELECT * FROM users"  :: IO [User]    
                           mapM_ print values          
                )            


addTool :: String -> String -> String -> IO ()
addTool toolName toolDesc date  = withConn "tools.db" $
 (\conn -> do
  execute conn ("INSERT INTO tools (name,description,timesBorrowed, lastReturned) VALUES (?,?,?,?)") (toolName, toolDesc, (0 :: Int), date)
  putStrLn "инструмент добавлен"
  )

promptAndAddTool :: IO ()
promptAndAddTool = do
   print "Input toolname"
   toolName <- getLine
   print "Input toolDesc"
   toolDesc <- getLine
   print "Input date"
   date <- getLine
   addTool toolName toolDesc date

printToolQuery :: Query -> IO ()
printToolQuery query = withConn "tools.db" $
                        ( \ conn -> 
                                    do
                                    values <- query_ conn query :: IO [Tool]
                                    mapM_ print values)
                               


printTools :: IO ()
printTools =  printToolQuery "SELECT * FROM tools;"

printAvailable :: IO ()
printAvailable = printToolQuery $ mconcat [ "select * from tools "
                                          , "where id not in "
                                          , "(select tool_id from checkedout);"]

printCheckedout :: IO ()
printCheckedout = printToolQuery $ 
                mconcat [ "select * from tools ", 
                                "where id in ", 
                                "(select tool_id from checkedout);"]                                          


selectTool :: Connection -> Int -> IO (Maybe Tool)
selectTool conn toolId = do
   resp <- query conn
           "SELECT * FROM tools WHERE id = (?)"
           (Only toolId) :: IO [Tool]
   return $ firstOrNothing resp

firstOrNothing :: [a] -> Maybe a
firstOrNothing [] = Nothing
firstOrNothing (x:_) = Just x


updateTool :: Tool -> Day -> Tool
updateTool tool date = tool
   { lastReturned = date
   , timesBorrowed = 1 + timesBorrowed tool
   }


updateOrWarn :: Maybe Tool -> IO ()
updateOrWarn Nothing = print "id not found"
updateOrWarn (Just tool) =  withConn "tools.db" $
                            \conn -> do
                              let q = mconcat ["UPDATE TOOLS SET  "
                                              ,"lastReturned = ?,"
                                              ," timesBorrowed = ? "
                                              ,"WHERE ID = ?;"]

                              execute conn q (lastReturned tool
                                             , timesBorrowed tool
                                             , toolId tool)
                              print "Tool updated"



updateToolTable toolId = do
                         conn <- open "tools.db"
                         chosenTool <- selectTool conn toolId
                         currentDate <-  utctDay <$> getCurrentTime  
                         let newTool = (fmap updateTool chosenTool) <*> (pure currentDate)
                         updateOrWarn newTool
                         close conn



checkin :: Int -> IO ()
checkin toolId =  withConn "tools.db" $
                     \conn -> do
                       execute conn
                         "DELETE FROM checkedout WHERE tool_id = (?);"
                         (Only toolId)

checkinAndUpdate :: Int -> IO ()
checkinAndUpdate toolId = do
   checkin toolId
   updateToolTable toolId

promptAndAddUser :: IO ()
promptAndAddUser = do
   print "Input username"
   userName <- getLine
   addUser userName

promptAndCheckout :: IO ()
promptAndCheckout = do
   print "Input ID user"
   userId <- pure read <*> getLine
   print "Input ID tool"
   toolId <- pure read <*> getLine
   checkout userId toolId

promptAndCheckin :: IO ()
promptAndCheckin = do
   print "Input ID tool"
   toolId <- pure read <*> getLine
   checkinAndUpdate toolId


performCommand :: String -> IO ()
performCommand command
   | command == "users" = printUsers >> main
   | command == "tools" = printTools >> main
   | command == "addTool" = promptAndAddTool >> main
   | command == "adduser" = promptAndAddUser >> main
   | command == "checkout" = promptAndCheckout >> main
   | command == "checkin" = promptAndCheckin >> main
   | command == "in" = printAvailable >> main
   | command == "out" = printCheckedout >> main
   | command == "quit" = print "bye!"
   | otherwise = print "Not found" >> main


main :: IO ()
main = do
   print "Enter command"
   command <- getLine
   performCommand command